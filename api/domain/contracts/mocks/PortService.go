// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/rpuggian/ports-service/api/domain/handlers/request"

	response "github.com/rpuggian/ports-service/api/domain/handlers/response"
)

// PortService is an autogenerated mock type for the PortService type
type PortService struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *PortService) FindByID(ctx context.Context, id string) (*response.FindPortResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *response.FindPortResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*response.FindPortResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *response.FindPortResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.FindPortResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamCreate provides a mock function with given fields: ctx, ports
func (_m *PortService) StreamCreate(ctx context.Context, ports request.UploadPortByFileRequest) (*response.UploadPortByFileResponse, error) {
	ret := _m.Called(ctx, ports)

	var r0 *response.UploadPortByFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.UploadPortByFileRequest) (*response.UploadPortByFileResponse, error)); ok {
		return rf(ctx, ports)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.UploadPortByFileRequest) *response.UploadPortByFileResponse); ok {
		r0 = rf(ctx, ports)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.UploadPortByFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.UploadPortByFileRequest) error); ok {
		r1 = rf(ctx, ports)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPortService creates a new instance of PortService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPortService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PortService {
	mock := &PortService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
