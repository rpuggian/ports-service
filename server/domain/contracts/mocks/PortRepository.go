// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rpuggian/ports-service/server/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// PortRepository is an autogenerated mock type for the PortRepository type
type PortRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, id
func (_m *PortRepository) Find(ctx context.Context, id string) (*entity.Port, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Port
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Port, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Port); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Port)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, domain
func (_m *PortRepository) Store(ctx context.Context, domain *entity.Port) error {
	ret := _m.Called(ctx, domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Port) error); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPortRepository creates a new instance of PortRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPortRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PortRepository {
	mock := &PortRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
